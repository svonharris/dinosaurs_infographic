class Dinosaur {
    constructor(species, image, weight, height, diet, where, when, fact) {
        this.species = species;
        this.image = image;
        this.weight = weight;
        this.height = height;
        this.diet = diet;
        this.where = where;
        this.when = when;
        this.facts = [
            fact,
            `The ${this.species} has a ${this.diet} diet.`,
            `${this.where} is where the ${this.species} lived.`,
            `The ${this.species} existed during the ${this.when} period.`
        ];
    }

    setPrimaryFact() {
        const facts = this.facts;
        const num = Math.floor(Math.random() * facts.length);
        this.primaryFact = facts[num];
    }

    findPigeon() {
        if (this.species === 'Pigeon') {
            this.facts = ['All birds are dinosaurs.'];
            this.setPrimaryFact();
        }
    }

}


class Human {
    constructor(name, feet, inches, weight, diet) {
        this.species = 'human';
        this.name = name;
        this.feet = feet;
        this.inches = inches;
        this.weight = weight;
        this.diet = diet;
        this.image = 'images/human.png';
    }
}


class Helpers {
    // Convert human height to inches
    heightConversion = (feet, inches) => {
        return ((feet * 12) + inches);
    }

    // Compare dino height to human height
    heightCompare = (human, dino) => {
        let heightDiff;
        if (human.height > dino.height) {
            heightDiff = human.height - dino.height;
            dino.facts.push(`You are ${heightDiff} inches taller than a ${dino.species}.`);
        } else {
            heightDiff = dino.height - human.height;
            dino.facts.push(`You are ${heightDiff} inches shorter than a ${dino.species}.`);
        }
    }
    
    // Compare dino weight to human weight
    weightCompare = (human, dino) => {
        let weightDiff;
        if (human.weight > dino.weight) {
            weightDiff = human.weight - dino.weight;
            const weightConversion = weightDiff.toLocaleString("en-US");
            dino.facts.push(`You weight ${weightConversion}lbs more than a ${dino.species}.`);
        } else {
            weightDiff = dino.weight - human.weight;
            const weightConversion = weightDiff.toLocaleString("en-US");
            dino.facts.push(`You weight ${weightConversion}lbs less than a ${dino.species}.`);
        }
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////



// Write a request to the server to read dino.json
const getDinos = () => {
    return fetch('http://localhost:8000/api/dinos')
        .then(res => res.json()) // Converts string into JSON
        .catch(err => {
            console.error('Error fetching JSON:', err);
            throw err; // Rethrow the error to be caught outside
        });
}


// document.addEventListener("DOMContentLoaded",function(){
document.getElementById('btn').addEventListener('click', function(event) {
    event.preventDefault();

    // Extract form data
    const name = document.getElementById('name').value;
    const feet = document.getElementById('feet').value;
    const inches = parseFloat(document.getElementById('inches').value);
    const weight = parseFloat(document.getElementById('weight').value);
    const diet = document.getElementById('diet').value;

    // Write code to validate form data
    

    // Create Human obj
    // Separate function | working with Human class
    const helper = new Helpers();
    const human = new Human(name, feet, inches, weight, diet);
    human.height = helper.heightConversion(human.feet, human.inches);

    // Create dinos objs
    getDinos().then(obj => {
        const dinoArr = [];
        for (let dino of obj.Dinos) {
            let dinosaur = new Dinosaur(dino.species, dino.image_url, dino.weight, dino.height, dino.diet, dino.where, dino.when, dino.fact);
            dinosaur.setPrimaryFact();
            dinoArr.push(dinosaur);
        }

        for (let dino of dinoArr) {
            helper.heightCompare(human, dino);
            helper.weightCompare(human, dino);
            dino.findPigeon();
        }

        
        const dinoHumanData = combineDinoHuman(dinoArr, human);
        moveHuman(dinoHumanData);
        displayGrid(dinoHumanData);
    });


    // 1. Combine dino & human data
    // 2. Position human data
    // 3. Build cards
    // 4. Build grid



//Combine dino & human data
const combineDinoHuman = (dinoArr, human) => {
    const humanData = [];
    humanData.push(human);
    const dinoHumanData = dinoArr.concat(humanData);
    return dinoHumanData;
}

// Move position of human data
const moveHuman = (dinoHumanData) => {
    const indexToMove = dinoHumanData.findIndex(obj => obj.species === 'human');
    if (indexToMove !== -1) {
        // Remove the object from its current position
        const objectToMove = dinoHumanData.splice(indexToMove, 1)[0];
        // Insert the object at position 4 in the array
        dinoHumanData.splice(4, 0, objectToMove);
    }
}

// Write function to create data cards
const buildDataCards = (dinoHumanData) => {
    const dinoHumanCards = [];
    for (var i=0; dinoHumanData.length > i; i++) {
        const createDiv = document.createElement("div");
        createDiv.className = 'grid-card';

        if (dinoHumanData[i].species === 'human') {
            createDiv.innerHTML = 
                `<h2 class="human-name">${dinoHumanData[i].name}</h2>
                <img src="${dinoHumanData[i].image}" alt="Image of ${dinoHumanData[i].name}" class="dino-img">`
            ;
        } else {
            createDiv.innerHTML =
                `<h2 class="dino-species">${dinoHumanData[i].species}</h2>
                <img src="${dinoHumanData[i].image}" alt="Image of ${dinoHumanData[i].species}" class="dino-img">
                <p class="dino-fact">${dinoHumanData[i].primaryFact}</p>`
            ;
        }
        dinoHumanCards.push(createDiv);
    }
    return dinoHumanCards;
}


//Build grid
const displayGrid = (dinoHumanData) => {
    const grid = document.getElementById('grid');
    const dinoHumanCards = buildDataCards(dinoHumanData);
    for (var i=0; dinoHumanCards.length > i; i++) {
        grid.append(dinoHumanCards[i]);
    }
    showGrid(grid);
}

// Hide user form
const hideForm = () => {
    const userForm = document.getElementById('dino-compare');
    userForm.style.display = 'none';
}

// Display dino/human data grid
const showGrid = (grid) => {
    grid.style.display = 'flex';
}


    hideForm();
});